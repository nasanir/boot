package pers.nasanir.blog.common.shiro.service;

import java.security.NoSuchAlgorithmException;
import java.util.List;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authc.IncorrectCredentialsException;
import org.apache.shiro.authc.SimpleAuthenticationInfo;
import org.apache.shiro.authc.UnknownAccountException;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;
import org.springframework.beans.factory.annotation.Autowired;

import pers.nasanir.blog.common.crypto.constant.EncoderEnum;
import pers.nasanir.blog.common.crypto.factroy.CryptoFactory;
import pers.nasanir.blog.common.crypto.itf.IEncoder;
import pers.nasanir.blog.common.db.service.JdbcBaseServiceImpl;
import pers.nasanir.blog.common.user.entity.UserVO;

public class BaseRealm extends AuthorizingRealm {
	@Autowired
	private JdbcBaseServiceImpl jdbcBaseService;

	@Override
	protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {
		// TODO Auto-generated method stub
		String username = token.getPrincipal().toString();
		SimpleAuthenticationInfo authInfo = null;
		try {
			IEncoder hex256Encoder = CryptoFactory.getInstance(EncoderEnum.HEX256);
			String passwordHex = hex256Encoder.encode2Hex((new String((char[]) token.getCredentials())));
			UserVO userVO = new UserVO();
			userVO.setUsername(username);
			jdbcBaseService.query(userVO);
			if (userVO.getUserid() != null) {
				String psd = userVO.getPassword();
				if (!psd.equals(passwordHex)) {
					throw new IncorrectCredentialsException("密码错误");
				}
			} else {
				throw new UnknownAccountException("此用户不存在");
			}
			new SimpleAuthenticationInfo(token.getPrincipal(),passwordHex.toCharArray(),
					getName());
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		
		return authInfo;
	}

}
